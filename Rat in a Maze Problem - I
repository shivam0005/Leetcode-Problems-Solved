class Solution{
    private:
    bool isSafe(vector<vector<int>> &m, int n, vector<vector<int>> visited, int newx, int newy){
        if((newx>=0 && newx<n) && (newy>=0 && newy<n) && visited[newx][newy]==0 && m[newx][newy]==1){
            return true; 
        }
        else{
            return false;
        }
    }
    void solve(vector<vector<int>> &m, int n, vector<vector<int>> visited, vector<string>&ans, int x, int y, string path){
        if(x==n-1 && y==n-1){
            ans.push_back(path);
            return;
        }
        
        visited[x][y]=1;
        //down
        int newx = x+1;
        int newy = y;
        
        if(isSafe(m, n, visited, newx, newy)){
            path.push_back('D');
            solve(m,n,visited,ans,newx,newy,path);
            path.pop_back();
        }
        
        //left
        newx = x;
        newy = y-1;
        if(isSafe(m, n, visited, newx, newy)){
            path.push_back('L');
            solve(m,n,visited,ans,newx,newy,path);
            path.pop_back();
        }
        //right
        newx = x;
        newy = y+1;
        if(isSafe(m, n, visited, newx, newy)){
            path.push_back('R');
            solve(m,n,visited,ans,newx,newy,path);
            path.pop_back();
        }
        //up
        newx = x-1;
        newy = y;
        if(isSafe(m, n, visited, newx, newy)){
            path.push_back('U');
            solve(m,n,visited,ans,newx,newy,path);
            path.pop_back();
        }
        visited[x][y]=0;
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string> ans;
        int x =0, y=0;
        if(m[x][y]==0){
            return ans;
        }
        vector<vector<int>> visited = m;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                visited[i][j]=0;
            }
        }
        string path = "";
        solve(m, n, visited, ans, x, y, path);
        sort(ans.begin(), ans.end());
        return ans;
    }
};
