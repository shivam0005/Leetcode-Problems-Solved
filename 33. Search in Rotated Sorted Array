class Solution {
private:
    int pivotIndex(vector<int>& nums){
        int n = nums.size();
        int s=0, e=n-1;
        while(s<e){
            int mid=s+(e-s)/2;
            if(nums[mid]>=nums[0]){
                s=mid+1;
            }
            else{
                e=mid;
            }
        }
        return s;
    }
    
    int binarySearch(vector<int>& nums, int target, int s, int e){
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<=target){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return -1;
    }
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int pivot = pivotIndex(nums);
        int ans;
        if(target >= nums[pivot] && target <=nums[n-1]){
            ans = binarySearch(nums, target, pivot, n-1);
        }
        else{
            ans = binarySearch(nums, target, 0, pivot-1);
        }
        return ans;
    }
};
