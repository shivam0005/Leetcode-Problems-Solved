node* getMid(node* &head){
    node* slow = head;
    node* fast = head->next;
    while(fast!=NULL && fast->next!=NULL){
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

node* mergeList(node* &left, node* &right){
    node* ans = new node(-1);
    node* temp = ans;
    while(left!=NULL && right!=NULL){
        if(left->data <=right->data){
            temp->next = left;
            temp = left;
            left = left->next;
        }
        else{
            temp->next = right;
            temp = right;
            right = right->next;
        }
    }
    while(left!=NULL){
         temp->next = left;
         temp = left;
         left = left->next;
    }
    while(right!=NULL){
        temp->next = right;
        temp = right;
        right = right->next;
    }
    ans = ans->next;
    return ans;
}

node* mergeSort(node *head) {
    // Write your code here.
    if(head==NULL || head->next == NULL){
        return head;
    }
    
    //find mid and break linkedlist into 2 halves
    node* mid = getMid(head);
    
    //sort both halves
    node* right = mergeSort(mid->next);
    mid->next = NULL;
    node* left = mergeSort(head);
    //merge both sorted linked list
    node* ans = mergeList(left,right);
    return ans;
}
