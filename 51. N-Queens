// Approach 1

class Solution {
private:
    bool isSafe(int row, int col, vector<string>&ds,int n){
        int tempRow = row;
        int tempCol = col;
        //upper diagonal
        while(row>=0 && col >=0){
            if(ds[row][col]=='Q') return false;
            row--, col--;
        }
        
        //left
        col = tempCol;
        row = tempRow;
        
        while(col>=0){
            if(ds[row][col]=='Q') return false;
            col--;
        }
        col = tempCol;
        row = tempRow;
        //lower diagonal
        while(row<n && col>=0){
            if(ds[row][col]=='Q') return false;
            row++;
            col--;
        }
        return true;
    }
    void solve(vector<vector<string>>& ans, int n,vector<string>ds, int col){
        if(col==n){
            ans.push_back(ds);
            return;
        }
        for(int row=0; row<n; row++){
            if(isSafe(row,col,ds,n)){
                ds[row][col]='Q';
                solve(ans,n,ds,col+1);
                ds[row][col]='.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string>ds(n);
        string s(n,'.');
        for(int i=0; i<n; i++){
            ds[i]=s;
        }
        solve(ans,n,ds,0);
        return ans;
    }
};
