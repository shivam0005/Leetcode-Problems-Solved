#include <bits/stdc++.h> 
class CircularQueue{
    public:
    // Initialize your data structure.
    int size;
    int* arr;
    int front;
    int rear;
    CircularQueue(int n){
        // Write your code here.
        size = n;
        arr = new int[size];
        front = -1;
        rear = -1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        // Write your code here.
        //queue is empty
        if((front == 0 && rear == size-1) || (rear == (front-1)%(size-1))){
            return false;
        }
        //first element to push
        else if(front==-1){
            front = rear = 0;
        }
        // rear is at end & front isn't at start
        else if(rear==size-1 && front!=0){
            rear = 0;
        }
        //normal push
        else{
            rear++;
        }
        arr[rear] = value;
        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
        // queue is empty
        if(front == -1){
            return -1;
        }
        
        int ans = arr[front];
        arr[front]=-1;
        //single element in queue
        if(front==rear){
            front = rear = -1;
        }
        //to maintain cyclic nature
        else if(front == size-1){
            front = 0;
        }
        else{
            front++;
        }
        return ans;
    }
};
