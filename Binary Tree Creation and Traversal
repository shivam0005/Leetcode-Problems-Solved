#include <iostream>
#include <queue>
using namespace std;

class node {
    public:
    int data;
    node* left;
    node* right;
    
    //constructor
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

node* buildTree(node* root){
    int data;
    cin >> data;
    root = new node(data);
    
    if(data == -1){
        return NULL;
    }
    
    cout << "enter data for inserting in left of " << data << endl;
    root->left = buildTree(root->left);
    cout << "enter data for inserting in right of " << data << endl;
    root->right = buildTree(root->right);
    return root;
}

//levelOrderTraversal
void levelOrderTraversal(node* &root){
    queue<node*> q;
    q.push(root);
    //separator
    q.push(NULL);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        if(temp!=NULL){
            cout << temp->data << " ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
        else{
            //level is completed
            cout << endl;
            if(!q.empty()){
                //queue still has some child node
                q.push(NULL);
            }
        }
    }
}

//inOrderTraversal

void inOrder(node* root){
    if(root == NULL) return;
    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}

//preOrderTraversal

void preOrderTraversal(node* root){
    if(root == NULL) return;
    cout << root->data << " ";
    preOrderTraversal(root->left);
    preOrderTraversal(root->right);
}

//postOrderTraversal

void postOrderTraversal(node* root){
    if(root == NULL) return;
    
    postOrderTraversal(root->left);
    postOrderTraversal(root->right);
    cout << root->data << " ";
}

int main()
{
    node* root =    NULL;
    cout << "Enter data for root:" <<endl;
    root = buildTree(root);
    // 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
    
    cout << "Printing level order traversal output" <<endl;
    levelOrderTraversal(root);
    cout << "Printing in order traversal output" <<endl;
    inOrder(root);
    cout << endl;
    cout << "Printing pre order traversal output" <<endl;
    preOrderTraversal(root);
    cout << endl;
    cout << "Printing post order traversal output" <<endl;
    postOrderTraversal(root);
    return 0;
}
